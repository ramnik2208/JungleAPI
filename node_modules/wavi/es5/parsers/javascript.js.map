{"version":3,"sources":["../../src/parsers/javascript.js"],"names":[],"mappings":"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","file":"javascript.js","sourcesContent":["\r\nvar utils = require(\"../utils/utils\");\r\nvar cheerio = require('cheerio');\r\nvar _ = require('underscore')._;\r\nvar db = require(\"../lib/database\");\r\nvar estraverse = require('estraverse');\r\nvar esrecurse = require('esrecurse');\r\nvar escope = require('escope');\r\nvar assignmentExpression = require(\"./javascript/assignmentExpression\");\r\nvar initStatement = require(\"./javascript/initStatement\");\r\nvar umd = require('acorn-umd');\r\nvar acorn = require(\"acorn/dist/acorn_loose\");\r\nvar parsersHelper = require(\"../utils/parsersHelper\");\r\nlet instance = null;\r\n\r\n\r\nvar path = require('path');\r\n\r\nclass Javascript {\r\n        constructor() {\r\n                if (!instance) {\r\n                        instance = this;\r\n                }\r\n\r\n                return instance;\r\n        }\r\n\r\n\r\n\r\n        operation(file) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n                                Promise.resolve(file)\r\n                                        .then(utils.read)\r\n                                        .then(instance.parseAST)\r\n                                        .then(instance.findJsElements)\r\n                                        .catch(error => { console.log(\"err\", error); })\r\n                                        .then(function () {\r\n                                                resolve();\r\n                                        });\r\n\r\n                        });\r\n        }\r\n\r\n\r\n\r\n\r\n        parseAST(result) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n\r\n                                let path = result[0];\r\n                                let data = result[1];\r\n                                let ast = acorn.parse_dammit(data, { locations: true, sourceType: 'module', ecmaVersion: 6, ranges: false });\r\n\r\n                                resolve([path, ast]);\r\n\r\n                        });\r\n        }\r\n\r\n\r\n\r\n        getScope(result) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n                                let ast = result[1];\r\n                                try {\r\n                                        let scopeManager = escope.analyze(ast, { sourceType: \"module\", ecmaVersion: 6 });\r\n\r\n                                        result[1] = scopeManager.acquire(ast);\r\n                                        resolve(result);\r\n                                } catch (e) {\r\n                                        reject(\"Bad Scope\");\r\n                                }\r\n                        }\r\n                );\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        findJsElements(result) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n                                let path = result[0];\r\n                                let ast = result[1];\r\n                                let scopeManager = escope.analyze(ast, { sourceType: \"module\", ecmaVersion: 6 });\r\n                                let allScopes = scopeManager.scopes;\r\n                                //let classId = db.addClass({name:path});\r\n\r\n                                let fileInfo = _.findWhere(db.getIdentifiedFiles(), { name: path });\r\n\r\n\r\n\r\n                                let classId = fileInfo.id;\r\n                                instance.checkImports(ast, fileInfo);\r\n\r\n\r\n                                _.each(allScopes, function (curScope, key) {\r\n\r\n                                        if ((curScope.upper === null || curScope.type === \"module\")) {\r\n                                                // curScope.id = classId;\r\n                                        }\r\n                                        //   else if (curScope.childScopes.length === 0) {\r\n                                        //curScope.type !== \"function\" && \r\n                                        //  }\r\n                                        else if (curScope.upper.type === \"function-expression-name\" && curScope.type === \"function\") {\r\n\r\n                                        }\r\n                                        else {\r\n\r\n                                                let scopeName = curScope.type;\r\n                                                if (curScope.type === \"block\" && curScope.block && curScope.block.body && curScope.block.body.length > 0) {\r\n                                                        scopeName = curScope.block.body[0].type;\r\n\r\n                                                        if (curScope.block.body[0].type === \"ExpressionStatement\") {\r\n                                                                scopeName = curScope.block.body[0].expression.type;\r\n                                                        }\r\n\r\n                                                }\r\n                                                else if (curScope.block && curScope.block.id && curScope.block.id.name !== null) {\r\n                                                        scopeName = curScope.block.id.name;\r\n                                                }\r\n\r\n                                                if (curScope.upper.upper.type === \"function-expression-name\") {\r\n                                                        curScope.upper = curScope.upper.upper;\r\n                                                }\r\n\r\n                                                let fill = \"lightblue\";\r\n\r\n                                                if (curScope.type !== \"function\") {\r\n                                                        fill = \"khaki\";\r\n                                                }\r\n\r\n                                                curScope.id = db.addClass({ name: scopeName, fill: fill, type: curScope.type, file: path, cluster: fileInfo.cluster });\r\n\r\n                                                if (!_.isUndefined(curScope.upper.id) && curScope.upper !== null && curScope.type !== \"module\") {\r\n\r\n                                                        db.addRelations({ from: curScope.upper.id, to: curScope.id, relationship: \"composition\" });\r\n                                                }\r\n\r\n                                        }\r\n\r\n                                });\r\n\r\n\r\n                                let curClassId = classId;\r\n                                estraverse.traverse(ast, {\r\n                                        enter: function (node, parent) {\r\n\r\n                                                if (/Function/.test(node.type)) {\r\n\r\n                                                        let upper = scopeManager.acquire(node).upper.id;\r\n                                                        curClassId = scopeManager.acquire(node).id;  // get current function scope\r\n\r\n                                                        // console.log(node);\r\n\r\n                                                        /* if (node.type === \"FunctionDeclaration\") {\r\n                                                              let e = \"\";\r\n                                                              var rawValue = [];\r\n                                                              _.each(node.params, function (param) {\r\n                                                                  if (param.type === \"Identifier\" && !_.isUndefined(param.name)) {\r\n                                                                      rawValue.push(param.name);\r\n                                                                  }\r\n                                                              });\r\n                                                              if (rawValue.length > 0) {\r\n                                                                  params = rawValue.join();\r\n                                                              }\r\n                                                              db.addMethod(upper, { name: node.id.name + \"(\" + params + \")\", type: \"\", visibility: \"public\" });\r\n                                                          }*/\r\n\r\n                                                        // console.log(scopeManager.acquire(node));\r\n\r\n                                                        if (node.type === \"FunctionDeclaration\") {\r\n\r\n                                                                let params = \"\";\r\n                                                                var rawValue = [];\r\n                                                                _.each(node.params, function (param) {\r\n                                                                        if (param.type === \"Identifier\" && !_.isUndefined(param.name)) {\r\n                                                                                rawValue.push(param.name);\r\n                                                                        }\r\n                                                                });\r\n                                                                if (rawValue.length > 0) {\r\n                                                                        params = rawValue.join();\r\n                                                                }\r\n\r\n                                                                if (scopeManager.acquire(node).childScopes === 0) {\r\n\r\n                                                                        db.addMethod(upper, { name: node.id.name, value: params, type: \"\", visibility: \"public\" });\r\n                                                                } else {\r\n                                                                        params = parsersHelper.removeSpecialChar(params);\r\n                                                                        db.setClass(curClassId, { name: node.id.name + \"(\" + params + \")\" });\r\n                                                                }\r\n\r\n\r\n                                                        }\r\n                                                        else if (node.type === \"FunctionExpression\") {\r\n\r\n\r\n                                                                // console.log(node.id.name);\r\n                                                                let name = \"\";\r\n                                                                if (parent.type === \"VariableDeclarator\") {\r\n\r\n                                                                        name = parent.id.name;\r\n                                                                }\r\n                                                                else if (node.id !== null) {\r\n                                                                        name = node.id.name;\r\n                                                                }\r\n                                                                else if (parent.type === \"AssignmentExpression\") {\r\n                                                                        name = parsersHelper.removeSpecialChar(parsersHelper.getLeftName(parent.left));\r\n                                                                }\r\n\r\n\r\n                                                                let params = \"\";\r\n                                                                var rawValue = [];\r\n                                                                _.each(node.params, function (param) {\r\n                                                                        if (param.type === \"Identifier\" && !_.isUndefined(param.name)) {\r\n                                                                                rawValue.push(param.name);\r\n                                                                        }\r\n                                                                });\r\n\r\n                                                                if (rawValue.length > 0) {\r\n                                                                        params = rawValue.join();\r\n                                                                }\r\n\r\n                                                                if (name === \"\" && parent.key && parent.key.name) {\r\n                                                                        name = parent.key.name;\r\n                                                                }\r\n\r\n\r\n                                                                params = parsersHelper.removeSpecialChar(params);\r\n                                                                db.setClass(curClassId, { name: name + \"(\" + params + \")\" });\r\n\r\n                                                        }\r\n\r\n\r\n                                                }\r\n                                                else if (node.type === \"VariableDeclarator\" && node.id && node.id.type === \"Identifier\") {\r\n                                                        var parseResult = initStatement.parse(node);\r\n                                                        if (parseResult.kind === \"property\") {\r\n                                                                db.addProperty(curClassId, parseResult);\r\n                                                        }\r\n                                                        else {\r\n\r\n                                                                db.addMethod(curClassId, parseResult);\r\n                                                        }\r\n                                                }\r\n                                                else if (node.type === \"AssignmentExpression\") {\r\n                                                        var parseResult = assignmentExpression.parse(node);\r\n                                                        if (parseResult.kind === \"property\") {\r\n                                                                db.addProperty(curClassId, parseResult);\r\n                                                        }\r\n                                                        else {\r\n\r\n                                                                db.addMethod(curClassId, parseResult);\r\n                                                        }\r\n                                                }\r\n\r\n                                                /*else if (node.type === \"ClassDeclaration\") {\r\n                                                        db.addProperty(curClassId, parseResult);\r\n                                                }*/\r\n\r\n                                        },\r\n                                        leave: function (node, parent) {\r\n\r\n                                        }\r\n                                });\r\n\r\n                                resolve(ast);\r\n                        }\r\n                );\r\n        }\r\n\r\n\r\n        checkImports(ast, parent) {\r\n\r\n                return new Promise(function (resolve, reject) {\r\n                        var imports = umd(ast, { es6: true, amd: true, cjs: true });\r\n\r\n                        _.each(imports, function (imp) {\r\n\r\n                                if (imp.source && imp.source.length === undefined) {\r\n                                        imp.source = [imp.source];\r\n                                }\r\n                                else {\r\n                                        imp.source = imp.sources;\r\n                                }\r\n\r\n                                _.each(imp.source, function (source) {\r\n                                        if (!_.isUndefined(source) && source.type === \"Literal\") {\r\n                                                let correctedPath = utils.correctPathSync(source.value, parent.name, \".js\");\r\n\r\n                                                // Find correspondance\r\n                                                let candidate = _.findWhere(db.getIdentifiedFiles(), { name: correctedPath });\r\n\r\n                                                if (candidate !== undefined) {\r\n                                                        // Create Relation\r\n                                                        db.addRelations({ from: parent.id, to: candidate.id, relationship: \"generalization\", cluster: true });\r\n                                                }\r\n\r\n                                        }\r\n                                });\r\n                        });\r\n                        resolve();\r\n                        //reject();\r\n\r\n                });\r\n        }\r\n\r\n\r\n}\r\n\r\nmodule.exports = new Javascript();"]}