{"version":3,"sources":["../../src/parsers/css.js"],"names":[],"mappings":";;;;;;AAAA,IAAI,WAAW,QAAQ,KAAR,EAAe,KAAf;AACf,IAAI,QAAQ,QAAQ,gBAAR,CAAR;AACJ,IAAI,KAAK,QAAQ,iBAAR,CAAL;AACJ,IAAI,QAAQ,QAAQ,OAAR,CAAR;AACJ,IAAI,IAAI,QAAQ,YAAR,EAAsB,CAAtB;AACR,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAGJ,IAAI,WAAW,IAAX;;IAEE;AACE,uBAAc;;;AACN,oBAAI,CAAC,QAAD,EAAW;AACP,mCAAW,IAAX,CADO;iBAAf;;AAIA,uBAAO,QAAP,CALM;SAAd;;;;8CASc,MAAM;AACZ,+BAAO,IAAI,OAAJ,CACC,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACnB,wCAAQ,OAAR,CAAgB,IAAhB,EACS,IADT,CACc,MAAM,SAAN,CADd,CAES,IAFT,CAEc,SAAS,SAAT,CAFd,CAGS,IAHT,CAGc,SAAS,iBAAT,CAHd,CAIS,KAJT,CAIe,iBAAS;AAAE,gDAAQ,GAAR,CAAY,KAAZ,EAAF;iCAAT,CAJf,CAKS,IALT,CAKc,YAAY;AACV,kDADU;iCAAZ,CALd,CADmB;yBAA3B,CADR,CADY;;;;0CAcV,QAAQ;AACV,+BAAO,IAAI,OAAJ,CACC,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACnB,oCAAI;AACI,4CAAI,QAAO,OAAO,CAAP,CAAP,CADR;AAEI,4CAAI,OAAO,OAAO,CAAP,CAAP,CAFR;AAGI,4CAAI,MAAM,SAAS,IAAT,CAAN,CAHR;AAII,gDAAQ,CAAC,KAAD,EAAO,GAAP,CAAR,EAJJ;iCAAJ,CAKE,OAAO,CAAP,EAAU;;AAGJ,+CAAO,gCAAgC,OAAO,CAAP,EAAU,IAAV,CAAvC,CAHI;iCAAV;yBANV,CADR,CADU;;;;kDAeA,QAAQ;AAClB,+BAAO,IAAI,OAAJ,CACC,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACnB,oCAAI,SAAS,OAAO,CAAP,CAAT,CADe;AAEnB,oCAAI,MAAM,OAAO,CAAP,CAAN,CAFe;;AAInB,sCAAM,IAAN,CAAW,IAAI,UAAJ,CAAe,KAAf,EAAsB,UAAU,IAAV,EAAgB,KAAhB,EAAuB;AAChD,4CAAI,KAAK,SAAL,KAAmB,IAAnB,IAA2B,EAAE,WAAF,CAAc,KAAK,SAAL,CAAd,IAAiC,KAAjC,EAAwC;;AAC/D,4DAAI,OAAO,MAAM,UAAN,CAAiB,KAAK,SAAL,CAAe,IAAf,CAAoB,GAApB,CAAjB,CAAP;AACJ,4DAAI,QAAQ,KAAK,YAAL,CAAkB,MAAlB,GAA2B,QAA3B;;AAGZ,4DAAI,UAAU,GAAG,QAAH,CAAY,EAAE,MAAM,IAAN,EAAY,MAAM,WAAN,EAAmB,MAAM,OAAO,IAAP,EAAa,SAAS,OAAO,OAAP,EAAzE,CAAV;AACJ,2DAAG,YAAH,CAAgB,EAAE,MAAM,OAAO,GAAP,EAAY,IAAI,OAAJ,EAAa,cAAc,aAAd,EAAjD;;AAGA,0DAAE,IAAF,CAAO,KAAK,YAAL,EAAmB,UAAU,WAAV,EAAuB;AACzC,oEAAI,OAAO,GAAG,WAAH,CAAe,OAAf,EAAwB,EAAE,MAAM,YAAY,QAAZ,EAAsB,OAAO,YAAY,KAAZ,EAAmB,MAAM,EAAN,EAAU,YAAY,GAAZ,EAA1F,CAAP,CADqC;yDAAvB,CAA1B;;AAKA;;;;;;;;qDAd+D;yCAAvE,MAuBO;AACC,gEADD;iDAvBP;iCADyB,EA2B9B,UAAU,GAAV,EAAe;AACV,kDADU;iCAAf,CA3BH,CAJmB;yBAA3B,CADR,CADkB;;;;;;;AA2ClC,OAAO,OAAP,GAAiB,IAAI,GAAJ,EAAjB","file":"css.js","sourcesContent":["var cssparse = require(\"css\").parse;\r\nvar utils = require(\"../utils/utils\");\r\nvar db = require(\"../lib/database\");\r\nvar async = require(\"async\");\r\nvar _ = require('underscore')._;\r\nvar path = require('path');\r\n\r\n\r\nlet instance = null;\r\n\r\nclass Css {\r\n        constructor() {\r\n                if (!instance) {\r\n                        instance = this;\r\n                }\r\n\r\n                return instance;\r\n        }\r\n\r\n\r\n        operation_css(file) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n                                Promise.resolve(file)\r\n                                        .then(utils.read_node)\r\n                                        .then(instance.parse_css)\r\n                                        .then(instance.find_css_elements)\r\n                                        .catch(error => { console.log(error); })\r\n                                        .then(function () {\r\n                                                resolve();\r\n                                        });\r\n\r\n                        });\r\n        }\r\n        parse_css(result) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n                                try {\r\n                                        let path = result[0];\r\n                                        let data = result[1];\r\n                                        let ast = cssparse(data);\r\n                                        resolve([path, ast]);\r\n                                } catch (e) {\r\n\r\n                                       \r\n                                        reject(\"File contain syntax error: \" + result[0].name);\r\n                                }\r\n                        });\r\n        }\r\n        find_css_elements(result) {\r\n                return new Promise(\r\n                        function (resolve, reject) {\r\n                                let parent = result[0];\r\n                                let ast = result[1];\r\n\r\n                                async.each(ast.stylesheet.rules, function (rule, cbVar) {\r\n                                        if (rule.selectors !== null && _.isUndefined(rule.selectors) == false) {\r\n                                                let name = utils.escapeHTML(rule.selectors.join(\" \"));\r\n                                                let value = rule.declarations.length + \" props\";\r\n\r\n\r\n                                                let classId = db.addClass({ name: name, fill: \"palegreen\", file: parent.name, cluster: parent.cluster });\r\n                                                db.addRelations({ from: parent.key, to: classId, relationship: \"composition\" });\r\n\r\n\r\n                                                _.each(rule.declarations, function (declaration) {\r\n                                                        let prop = db.addProperty(classId, { name: declaration.property, value: declaration.value, type: \"\", visibility: \"+\" });\r\n                                                })\r\n\r\n\r\n                                                cbVar();\r\n\r\n                                                /*async.each(rule.declarations, function (declaration, cbRule) {\r\n                                                    let prop = db.addProperty(classId, { name: declaration.property, value: declaration.value, type: \"\", visibility: \"+\" });\r\n                                                    cbRule();\r\n                                                }, function (err) {\r\n                                                    cbVar();\r\n                                                })*/\r\n\r\n                                        } else {\r\n                                                cbVar()\r\n                                        }\r\n                                }, function (err) {\r\n                                        resolve();\r\n                                })\r\n\r\n                        });\r\n        }\r\n\r\n\r\n}\r\n\r\nmodule.exports = new Css();\r\n"]}