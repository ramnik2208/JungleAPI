{"version":3,"sources":["../../src/lib/graph.js"],"names":[],"mappings":"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","file":"graph.js","sourcesContent":["require(\"babel-polyfill\");\r\nvar Viz = require('./viz.js');\r\nvar utils = require('../utils/utils');\r\nvar _ = require('underscore')._;\r\n\r\n\r\nvar fs = require(\"fs\");\r\n\r\n\r\n\r\nmodule.exports = {\r\n\r\n        createDot: function (options, classes, relations) {\r\n\r\n                let graph_settings = \"\";\r\n                if (options.EXPERIMENTAL === true) {\r\n                        graph_settings = \"layout=fdp\";\r\n                }\r\n                else {\r\n                        //\r\n                        graph_settings = \"compound=true;\\n splines=true;\\n labeljust=left; rankdir=TB;\\n  overlap=false; \\n ranksep=0.1;  nodesep=0.1\";\r\n                }\r\n\r\n                var USE_RANKING = false;\r\n                let dotResult = [];\r\n\r\n                //\r\n                let txt = \"digraph G {\\n \"+graph_settings+\"  \\n \";\r\n                let cluster = 0;\r\n                let current_cluster = \"\";\r\n\r\n                var sortedClasses = _.sortBy(classes, 'cluster');\r\n\r\n                _.each(sortedClasses, function (classe) {\r\n\r\n                        if (current_cluster !== classe.cluster) {\r\n                                if (current_cluster !== \"\") {\r\n                                        txt += \"\\n } \\n\";\r\n                                }\r\n                                current_cluster = classe.cluster;\r\n                                txt += 'subgraph ' + classe.cluster + ' {\\n  style=\"filled\"; color=black;fillcolor=lightgray;fontsize=30;  label = \"' + classe.name + '\"; \\n color=lightgrey; \\n node[shape=record,style=filled,fillcolor=gray95] \\n';\r\n\r\n                                //shape=\"folder\";\r\n\r\n                                cluster++;\r\n                        }\r\n\r\n                        let methods = [];\r\n\r\n\r\n                        _.each(classe.methods, function (method) {\r\n                                methods.push(method + \"\\\\l\");\r\n                        });\r\n\r\n                        methods = _.unique(methods).sort();\r\n\r\n                        let properties = [];\r\n                        _.each(classe.properties, function (property) {\r\n                                properties.push(property + \"\\\\l\");\r\n                        });\r\n\r\n                        properties = _.unique(properties).sort();\r\n\r\n\r\n                        if (classe.type === \"css\") {\r\n\r\n                        }\r\n\r\n\r\n                        else if (classe.is_global === true) {\r\n                                classe.type = \"Global\";\r\n                                classe.name = \"\";\r\n                        }\r\n\r\n\r\n\r\n                        let title = \"\";\r\n                        if (!_.isUndefined(classe.type)) {\r\n                                title = \" \\«\" + classe.type.toUpperCase() + \"»\\\\n \"\r\n                        }\r\n                        title += classe.name;\r\n\r\n\r\n                        let propsep = \"\";\r\n                        if (properties.length > 0) {\r\n                                propsep = '|';\r\n                        }\r\n\r\n                        let methodsep = \"\";\r\n                        if (methods.length > 0) {\r\n                                methodsep = '|';\r\n                        }\r\n\r\n\r\n                        txt += classe.key + '[label = \"{' + title + propsep + properties.join(\"\") + methodsep + methods.join(\"\") + '}\", fillcolor=' + classe.fill + ']\\n ';\r\n                });\r\n\r\n                //*************************************** */\r\n\r\n                if (USE_RANKING) {\r\n                        let rank = []\r\n\r\n\r\n                        let total_clusters = cluster;\r\n                        //\r\n                        let count = 0;\r\n                        let rk = \"\";\r\n                        for (index = 0; index < total_clusters; ++index) {\r\n                                count++;\r\n                                rk += index + \" \";\r\n                                if (count === 3) {\r\n                                        count = 0;\r\n                                        rank.push(\"{rank=same \" + rk + \"}\");\r\n                                        rk = \"\";\r\n                                }\r\n\r\n\r\n                        }\r\n                        if (rk != \"\") {\r\n                                rank.push(\"{rank=same \" + rk + \"}\");\r\n                        }\r\n\r\n                        let ranking = rank.join(\" -> \") + \"[style=invis]\";\r\n\r\n\r\n                        txt += ranking;\r\n                }\r\n\r\n                //************************************************************* */\r\n                txt += \"\\n}\\n\"\r\n                _.each(relations, function (relation) {\r\n\r\n\r\n                        let arrowstyle = \"\";\r\n\r\n                        if (relation.relationship === \"composition\") {\r\n                                arrowstyle = \"arrowtail=diamond dir=back\";\r\n                        }\r\n\r\n                        if (relation.cluster === true) {\r\n                                txt += relation.from + \"->\" + relation.to + \" [ \" + arrowstyle + \"ltail=cluster_\" + relation.from + \",\" + \"lhead=cluster_\" + relation.to + \"] \\n\";\r\n                        }\r\n                        else {\r\n                                txt += relation.from + \"->\" + relation.to + \" [\" + arrowstyle + \"]   \\n\";\r\n                        }\r\n\r\n                });\r\n                txt += \"}\";\r\n\r\n                //utils.append('test.dot', txt);\r\n\r\n                return txt;\r\n\r\n        },\r\n        generateGraph: function (dotResult) {\r\n\r\n                try {\r\n                        return Viz(dotResult, \"svg\");\r\n\r\n                } catch (e) {\r\n                        console.log(e)\r\n                        return;\r\n                }\r\n\r\n        }\r\n\r\n}"]}